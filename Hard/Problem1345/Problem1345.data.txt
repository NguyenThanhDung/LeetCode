index                       0       1       2       3       4       5           6       7       8       9
array                   {   100,    -23,    -23,    404,    100,    23,         23,     23,     3,      404 }
 minForwardStepsToDest      8       7       6       5       4       3           2       1       0                       // If jump forward, how many remaining steps to reach the destination
minBackwardStepsToDest      8       8       7       6       5       4           3       2       1                       // If jump backward, how many remaining steps to reach the destination
minJumpableStepsToDest      {4:5}   {2:7}   {1:8}   {9:0}   {0:9}   {6:3, 7:2}  {5:3,7:1}      []      []                 // If jump to this position, how many remaining steps to reach the destination

i0:100
    i1:-23
        i2:-23
            i3:404
                i4:100
                    i5:23
                        i6:23
                            i7:23
                                i8:3
                                    i9:404  -> End
                                    i7 -> Dup
                                    []
                                i6:23 -> Dup
                                i5:23 -> Dup
                            i5 -> Dup
                            i5 -> Dup Jump
                            i7
                        i4 -> Dup
                i9:404 -> End
    i4:100
        i3:404
            i4:100
            i9:404 -> End
        i5:23
            i6:23
                i7:23
                    i8:3
                        i9:404 -> End
            i7:23
                i6:23
                i8:3
                    i9:404 -> End

i0:100
    i1:-23
        i2:-23
            i3:404
                i4:100 -> Stop, no more direction
                i9:404 -> End, minSteps: 4
    i4:100
        i3:404
            i4:100 -> Stop, no more direction
            i9:404 -> End, minSteps: 3
        i5:23
            i6:23 -> Stop, exceed min steps
            i7:23 -> Stop, exceed min steps